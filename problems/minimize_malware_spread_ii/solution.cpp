class Solution {
public:
    int uf[301]={};
    vector<int> size;
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int N= graph.size();
        size.resize(N+1, 1);
        vector<int> ini(N+1);
        memset(uf,-1,sizeof(uf));
        for (auto i : initial) ini[i]=1;
        for (int i=0; i<N; i++){
            for (int j=i+1; j<N; j++){
                if (graph[i][j] && !ini[i] && !ini[j]){
                    connect(i,j);
                }
            }
        }
        vector<int> cnt(N);
        unordered_map<int, set<int>>map;
        for (auto u : initial){
          set<int> com;
          for (int v=0; v<N; v++){
              if (ini[v] || !graph[u][v]) continue;
              com.insert(find(v));
          }  
          map[u]=com;
 
          for (auto c : com) {
              cnt[c]++;
          }
        } 
        int best=-1,ans=-1;
        for (auto i : initial){
            int score=0;
            for (auto c : map[i]){
                if (cnt[c]==1)
                    score +=size[c];
            }
            if (score > best || score==best && i <ans){
                best = score;
                ans = i;
            }            
        }
        return ans ;
    }
    void connect(int i, int j){
        int pi = find(i), pj = find (j);
        if (pi!=pj) {
            if(size[pi] <= size[pj])
                uf[pi]=pj, size[pj]+=size[pi];
            else
                uf[pj]=pi, size[pi]+=size[pj];
        }
    }
    int find(int i){
        return uf[i] == -1 ? i : uf[i] = find (uf[i]);
    }
};