class Solution {
public:
    int uf[301]={};
    vector<int> size;
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int N= graph.size();
        size.resize(N+1, 1);
        memset(uf,-1,sizeof(uf));
        for (int i=0; i<N; i++){
            for (int j=i+1; j<N; j++){
                if (graph[i][j])
                    connect(i,j);
            }
        }
        vector<int> vis(N);
        for (auto i : initial) vis[find(i)]++;
        int idx=N, sz= -1;
        for (auto i : initial){
            int pi = find(i);
            if (vis[pi] == 1 && size[pi] >= sz){
                if (size[pi] > sz)
                    sz = size[pi], idx= i ;
                else
                    idx = min(idx,i);
            }
        }
        return sz == -1 ? *min_element(begin(initial), end(initial)) : idx ;
    }
    void connect(int i, int j){
        int pi = find(i), pj = find (j);
        if (pi!=pj) {
            if(size[pi] <= size[pj])
                uf[pi]=pj, size[pj]+=size[pi];
            else
                uf[pj]=pi, size[pi]+=size[pj];
        }
    }
    int find(int i){
        return uf[i] == -1 ? i : uf[i] = find (uf[i]);
    }
};